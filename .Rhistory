# --- Corrigir formato numérico (trocando vírgula por ponto) ---
df[meses_ordem] <- lapply(df[meses_ordem], function(x) as.numeric(gsub(",", ".", x)))
# --- Formatar nomes dos meses com só a primeira letra maiúscula ---
meses_formatados <- str_to_title(tolower(meses_ordem))
# --- Transformar dados para formato longo ---
df_long <- df |>
select(TIPO, DESTINO, all_of(meses_ordem)) |>
mutate(
TIPO = str_to_title(TIPO),
DESTINO_CATEGORIA = case_when(
str_to_upper(DESTINO) == "RECICLAGEM" ~ "Reciclável",
!is.na(DESTINO) ~ "Convencional ou Logística Reversa",
TRUE ~ NA_character_
)
) |>
pivot_longer(
cols = all_of(meses_ordem),
names_to = "MES",
values_to = "QUANTIDADE"
) |>
filter(!is.na(DESTINO_CATEGORIA), !is.na(QUANTIDADE), !is.na(TIPO)) |>
mutate(
MES = factor(str_to_title(tolower(MES)), levels = meses_formatados),
# Criar variável para legenda combinada
TIPO_DESTINO = if_else(
DESTINO_CATEGORIA == "Reciclável",
paste0(TIPO, " (Reciclável)"),
"Outras (Convencional ou Logística Reversa)"
)
)
# --- Agregar os dados ---
df_plot <- df_long |>
group_by(MES, TIPO_DESTINO) |>
summarise(
QUANTIDADE = sum(QUANTIDADE, na.rm = TRUE),
.groups = "drop"
)
# --- Criar paleta de cores ---
tipos_unicos <- unique(df_plot$TIPO_DESTINO)
n_tipos <- length(tipos_unicos)
# Usar paleta Set3 (máx 12 cores, ajustar se precisar)
cores <- RColorBrewer::brewer.pal(min(n_tipos, 12), "Set1")
names(cores) <- tipos_unicos
# Se tiver mais que 12 categorias, usar cores adicionais (cinza claro para "Outras")
if (n_tipos > 12) {
cores["Outras (Convencional ou Logística Reversa)"] <- "gray80"
}
# --- Gráfico ---
p <- ggplot(df_plot, aes(x = MES, y = QUANTIDADE, fill = TIPO_DESTINO)) +
geom_bar(stat = "identity", position = "stack", color = "gray20", size = 0.3) + # borda preta nas barras
scale_fill_manual(values = cores, name = "Tipo de Material e Destino") +
labs(
title = "Distribuição Mensal das Coletas por Tipo de Material e Destino",
subtitle = "Comparação entre materiais Recicláveis e outras formas de destino",
x = "Mês",
y = "Quantidade Coletada (kg)"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, face = "italic", size = 12, margin = margin(b = 10)),
axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
legend.title = element_text(face = "bold"),
panel.grid.major.y = element_line(color = "gray90", size = 0.3)
)
# Exibir
print(p)
# Salvar em PNG
ggsave("grafico_coletas_reciclagem_melhorado.png", plot = p, width = 12, height = 6, dpi = 300)
# Usar paleta Set3 (máx 12 cores, ajustar se precisar)
cores <- RColorBrewer::brewer.pal(min(n_tipos, 12), "Accent")
names(cores) <- tipos_unicos
# Se tiver mais que 12 categorias, usar cores adicionais (cinza claro para "Outras")
if (n_tipos > 12) {
cores["Outras (Convencional ou Logística Reversa)"] <- "gray80"
}
# --- Gráfico ---
p <- ggplot(df_plot, aes(x = MES, y = QUANTIDADE, fill = TIPO_DESTINO)) +
geom_bar(stat = "identity", position = "stack", color = "gray20", size = 0.3) + # borda preta nas barras
scale_fill_manual(values = cores, name = "Tipo de Material e Destino") +
labs(
title = "Distribuição Mensal das Coletas por Tipo de Material e Destino",
subtitle = "Comparação entre materiais Recicláveis e outras formas de destino",
x = "Mês",
y = "Quantidade Coletada (kg)"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, face = "italic", size = 12, margin = margin(b = 10)),
axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
legend.title = element_text(face = "bold"),
panel.grid.major.y = element_line(color = "gray90", size = 0.3)
)
# Exibir
print(p)
# --- Leitura dos dados ---
df <- read_xlsx("C:/projetos-r/pokemon/data/dados_coleta.xlsx")
df
library(tidyverse)
library(lavaan)
library(semTools)
df <- read_csv("C:/projetos-r/cotidiano_2023/data/dados_thales.csv")
df <- df |>
filter(nens_recode != "outros")
mod.eactd <- '
F1 =~ eactd10 + eactd44 + eactd2 + eactd37 + eactd45 +
eactd23 + eactd34 + eactd32 + eactd1 + eactd20
F2 =~ eactd29 + eactd41 + eactd54 + eactd14 +
eactd55 + eactd30 + eactd36 + eactd12 + eactd38 +
eactd35 + eactd50 + eactd51
F3 =~ eactd25 + eactd39 + eactd42 + eactd56 +
eactd58 + eactd48 + eactd57 + eactd28 + eactd33
'
eactd_ok <- df |>
select(starts_with("eactd"))
eactd_ok
all.results <- matrix(NA, ncol = 8, nrow = 4)
baseline <- measEq.syntax(configural.model = mod.eactd,
data = df,
ordered = colnames(eactd_ok),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "nens_recode",
group.equal = "configural")
model.baseline <- as.character(baseline)
fit.baseline <- cfa(model.baseline, data = df,
group = "nens_recode",
ordered = colnames(eactd_ok))
all.results[1, 1:6] <- round(data.matrix(fitmeasures(
fit.baseline, fit.measures = c(
"chisq.scaled","df.scaled",
"pvalue.scaled", "rmsea.scaled",
"cfi.scaled", "tli.scaled"))),
digits = 3)
all.results
model.baseline
fit.prop4
prop4 <- measEq.syntax(configural.model = mod.eactd,
data = df,
ordered = colnames(eactd_ok),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "nens_recode",
group.equal = c("thresholds"))
model.prop4 <- as.character(prop4)
fit.prop4 <- cfa(model.prop4, data = df,
group = "nens_recode",
ordered = colnames(eactd_ok))
all.results[2, 1:6] <- round(data.matrix(fitmeasures(
fit.prop4, fit.measures = c(
"chisq.scaled", "df.scaled",
"pvalue.scaled", "rmsea.scaled",
"cfi.scaled", "tli.scaled"))),
digits = 3)
# Proposição 07 de Wu e Estabrook (2016)
# fatores, threshold e cargas fatoriais
prop7 <- measEq.syntax(configural.model = mod.eactd,
data = df,
ordered = colnames(eactd_ok),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "nens_recode",
group.equal = c("thresholds",
"loadings"))
model.prop7 <- as.character(prop7)
fit.prop7 <- cfa(model.prop7, data = df,
group = "nens_recode",
ordered = colnames(eactd_ok))
# --- Criar paleta de cores ---
tipos_unicos <- unique(df_plot$TIPO_DESTINO)
n_tipos <- length(tipos_unicos)
# Usar paleta Set3 (máx 12 cores, ajustar se precisar)
cores <- RColorBrewer::brewer.pal(min(n_tipos, 12), "Set3")
names(cores) <- tipos_unicos
# Se tiver mais que 12 categorias, usar cores adicionais (cinza claro para "Outras")
if (n_tipos > 12) {
cores["Outras (Convencional ou Logística Reversa)"] <- "gray80"
}
# --- Gráfico ---
p <- ggplot(df_plot, aes(x = MES, y = QUANTIDADE, fill = TIPO_DESTINO)) +
geom_bar(stat = "identity", position = "stack", color = "gray20", size = 0.3) + # borda preta nas barras
scale_fill_manual(values = cores, name = "Tipo de Material e Destino") +
labs(
title = "Distribuição Mensal das Coletas por Tipo de Material e Destino",
subtitle = "Comparação entre materiais Recicláveis e outras formas de destino",
x = "Mês",
y = "Quantidade Coletada (kg)"
) +
theme_minimal(base_size = 13) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, face = "italic", size = 12, margin = margin(b = 10)),
axis.text.x = element_text(angle = 45, hjust = 1, face = "bold"),
legend.title = element_text(face = "bold"),
panel.grid.major.y = element_line(color = "gray90", size = 0.3)
)
# Exibir
print(p)
# Salvar em PNG
ggsave("grafico_coletas_reciclagem_melhorado.png", plot = p, width = 12, height = 6, dpi = 300)
# Salvar em PNG
ggsave("grafico_coletas_reciclagem_melhorado.png",
plot = p, width = 12, height = 6, dpi = 300,
bg = "white")
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(readxl)
library(lavaan)
df <- read_csv("data/empatia_congresso.csv")
df_all_itens <- df |>
select(a1:a20) |>
filter()
df_all_itens <- df |>
select(a1:a20) |>
filter()
codebook |>
filter(Fator != "Afeto negativo") |>
print()
df
df <- read_csv("data/empatia_congresso.csv")
df <- read_csv("C:/projetos-r/Congresso_IBAP_2025/data/eactd_inv.csv")
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(lavaan)
library(semTools)
df <- read_csv("C:/projetos-r/Congresso_IBAP_2025/data/eactd_inv.csv")
glimpse(df)
df <- df |>
filter(nens_recode != "outros")
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(lavaan)
library(semTools)
df <- read_csv("C:/projetos-r/Congresso_IBAP_2025/data/eactd_inv.csv")
df <- df |>
filter(nens_recode != "outros")
modelo_eactd <- '
F1 =~ eactd10 + eactd44 + eactd2 + eactd37 + eactd45 +
eactd23 + eactd34 + eactd32 + eactd1 + eactd20
F2 =~ eactd29 + eactd41 + eactd54 + eactd14 +
eactd55 + eactd30 + eactd36 + eactd12 + eactd38 +
eactd35 + eactd50 + eactd51
F3 =~ eactd25 + eactd39 + eactd42 + eactd56 +
eactd58 + eactd48 + eactd57 + eactd28 + eactd33
'
eactd_ok <- df |>
select(starts_with("eactd"))
all.results <- matrix(NA, ncol = 8, nrow = 4)
baseline <- measEq.syntax(configural.model = modelo_eactd,
data = df,
ordered = colnames(eactd_ok),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "nens_recode",
group.equal = "configural")
model.baseline <- as.character(baseline)
fit.baseline <- cfa(model.baseline, data = df,
group = "nens_recode",
ordered = colnames(eactd_ok))
install.packages(MASS)
install.packages("MASS")
library(MASS)
library(ggplot2)
library(dplyr)
library(tidyr)
# Simular dados
set.seed(42)
n <- 200
idade <- round(rnorm(n, mean = 25, sd = 5))
trabalha <- sample(c("Sim", "Não"), size = n, replace = T, prob = c(0.6, 0.4))
qualidade_vida <- case_when(
idade < 22 & trabalha == "Não" ~ "Ruim",
idade < 28 ~ "Média",
TRUE ~ "Boa"
)
df <- data.frame(
idade = idade,
trabalha = factor(trabalha),
qualidade_vida = factor(qualidade_vida, levels = c("Ruim", "Média", "Boa"), ordered = T)
)
# Ajustar modelo de regressão logística ordinal
modelo <- polr(qualidade_vida ~ idade + trabalha, data = df, method = "logistic")
library(MASS)
library(ggplot2)
library(dplyr)
library(tidyr)
# Simulação com aleatoriedade mais realista
set.seed(42)
n <- 200
idade <- round(rnorm(n, mean = 25, sd = 5))
trabalha <- sample(c("Sim", "Não"), size = n, replace = TRUE, prob = c(0.6, 0.4))
# Gerar um score contínuo e depois categorizar
score <- 0.3 * idade + ifelse(trabalha == "Sim", 1, -1) + rnorm(n)
qualidade_vida <- cut(score,
breaks = quantile(score, probs = c(0, 1/3, 2/3, 1)),
labels = c("Ruim", "Média", "Boa"),
include.lowest = TRUE,
ordered_result = TRUE)
df <- data.frame(
idade = idade,
trabalha = factor(trabalha),
qualidade_vida = qualidade_vida
)
# Reajustar modelo
modelo <- polr(qualidade_vida ~ idade + trabalha, data = df, method = "logistic")
# Grid para predições
idade_seq <- seq(min(df$idade), max(df$idade), length.out = 100)
novo_df <- expand.grid(
idade = idade_seq,
trabalha = factor("Sim", levels = levels(df$trabalha))
)
# Previsões
probs <- predict(modelo, newdata = novo_df, type = "probs")
probs_df <- cbind(novo_df, probs)
# Long format
probs_long <- probs_df |>
pivot_longer(cols = c("Ruim", "Média", "Boa"), names_to = "categoria", values_to = "probabilidade")
# Gráfico
ggplot(probs_long, aes(x = idade, y = probabilidade, color = categoria)) +
geom_line(size = 1.2) +
labs(
title = "Regressão Logística Ordinal: Probabilidades por Idade (Trabalha = 'Sim')",
x = "Idade",
y = "Probabilidade",
color = "Qualidade de Vida"
) +
theme_minimal()
# Gráfico
ggplot(probs_long, aes(x = idade, y = probabilidade, color = categoria)) +
geom_line(size = 1.2) +
labs(
title = "Regressão Logística Ordinal: Probabilidades por Idade (Trabalha = 'Sim')",
x = "Idade",
y = "Probabilidade de qualidade de vida",
color = "Qualidade de Vida"
) +
theme_minimal()
novo_df <- expand.grid(
idade = idade_seq,
trabalha = factor(c("Sim", "Não"), levels = levels(df$trabalha))
)
novo_df <- expand.grid(
idade = idade_seq,
trabalha = factor(c("Sim", "Não"), levels = levels(df$trabalha))
)
# Previsão
probs <- predict(modelo, newdata = novo_df, type = "probs")
probs_df <- cbind(novo_df, probs)
# Long format
probs_long <- probs_df |>
pivot_longer(cols = c("Ruim", "Média", "Boa"), names_to = "categoria", values_to = "probabilidade")
# Gráfico com facet
ggplot(probs_long, aes(x = idade, y = probabilidade, color = categoria)) +
geom_line(size = 1.2) +
facet_wrap(~ trabalha) +
labs(
title = "Probabilidade de Qualidade de Vida por Idade e Trabalho",
x = "Idade",
y = "Probabilidade",
color = "Qualidade de Vida"
) +
theme_minimal()
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(lavaan)
library(semTools)
df <- read_csv("C:/projetos-r/Congresso_IBAP_2025/data/eactd_inv.csv")
df <- df |>
filter(nens_recode != "outros")
modelo_eactd <- '
F1 =~ eactd10 + eactd44 + eactd2 + eactd37 + eactd45 +
eactd23 + eactd34 + eactd32 + eactd1 + eactd20
F2 =~ eactd29 + eactd41 + eactd54 + eactd14 +
eactd55 + eactd30 + eactd36 + eactd12 + eactd38 +
eactd35 + eactd50 + eactd51
F3 =~ eactd25 + eactd39 + eactd42 + eactd56 +
eactd58 + eactd48 + eactd57 + eactd28 + eactd33
'
eactd_ok <- df |>
select(starts_with("eactd"))
all.results <- matrix(NA, ncol = 8, nrow = 4)
baseline <- measEq.syntax(configural.model = modelo_eactd,
data = df,
ordered = colnames(eactd_ok),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "nens_recode",
group.equal = "configural")
model.baseline <- as.character(baseline)
fit.baseline <- cfa(model.baseline, data = df,
group = "nens_recode",
ordered = colnames(eactd_ok))
all.results[1, 1:6] <- round(data.matrix(fitmeasures(
fit.baseline, fit.measures = c(
"chisq.scaled", "df.scaled",
"pvalue.scaled", "rmsea.scaled",
"cfi.scaled", "tli.scaled"))),
digits = 3)
all.results
fit.baseline
all.results
df
colnames(df)
baseline <- measEq.syntax(configural.model = modelo_eactd,
data = df,
ordered = c(
"eactd10", "eactd44", "eactd2", "eactd37", "eactd45",
"eactd23", "eactd34", "eactd32", "eactd1", "eactd20",
"eactd29", "eactd41", "eactd54", "eactd14", "eactd55",
"eactd30", "eactd36", "eactd12", "eactd38", "eactd35",
"eactd50", "eactd51",
"eactd25", "eactd39", "eactd42", "eactd56", "eactd58",
"eactd48", "eactd57", "eactd28", "eactd33"
),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "nens_recode",
group.equal = "configural")
model.baseline <- as.character(baseline)
fit.baseline <- cfa(model.baseline, data = df,
group = "nens_recode",
ordered = c(
"eactd10", "eactd44", "eactd2", "eactd37", "eactd45",
"eactd23", "eactd34", "eactd32", "eactd1", "eactd20",
"eactd29", "eactd41", "eactd54", "eactd14", "eactd55",
"eactd30", "eactd36", "eactd12", "eactd38", "eactd35",
"eactd50", "eactd51",
"eactd25", "eactd39", "eactd42", "eactd56", "eactd58",
"eactd48", "eactd57", "eactd28", "eactd33"
))
all.results[1, 1:6] <- round(data.matrix(fitmeasures(
fit.baseline, fit.measures = c(
"chisq.scaled", "df.scaled",
"pvalue.scaled", "rmsea.scaled",
"cfi.scaled", "tli.scaled"))),
digits = 3)
all.results
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(readxl)
library(lavaan)
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(lavaan)
library(semTools)
df <- read_csv("C:/projetos-r/Congresso_IBAP_2025/data/eactd_inv.csv")
df <- df |>
filter(nens_recode != "outros")
modelo_eactd <- '
F1 =~ eactd10 + eactd44 + eactd2 + eactd37 + eactd45 +
eactd23 + eactd34 + eactd32 + eactd1 + eactd20
F2 =~ eactd29 + eactd41 + eactd54 + eactd14 +
eactd55 + eactd30 + eactd36 + eactd12 + eactd38 +
eactd35 + eactd50 + eactd51
F3 =~ eactd25 + eactd39 + eactd42 + eactd56 +
eactd58 + eactd48 + eactd57 + eactd28 + eactd33
'
all.results <- matrix(NA, ncol = 8, nrow = 4)
baseline <- measEq.syntax(configural.model = modelo_eactd,
data = df,
ordered = c(
"eactd10", "eactd44", "eactd2", "eactd37", "eactd45",
"eactd23", "eactd34", "eactd32", "eactd1", "eactd20",
"eactd29", "eactd41", "eactd54", "eactd14", "eactd55",
"eactd30", "eactd36", "eactd12", "eactd38", "eactd35",
"eactd50", "eactd51",
"eactd25", "eactd39", "eactd42", "eactd56", "eactd58",
"eactd48", "eactd57", "eactd28", "eactd33"
),
parameterization = "delta",
ID.fac = "std.lv",
ID.cat = "Wu.Estabrook.2016",
group = "nens_recode",
group.equal = "configural")
model.baseline <- as.character(baseline)
fit.baseline <- cfa(model.baseline, data = df,
group = "nens_recode",
ordered = c(
"eactd10", "eactd44", "eactd2", "eactd37", "eactd45",
"eactd23", "eactd34", "eactd32", "eactd1", "eactd20",
"eactd29", "eactd41", "eactd54", "eactd14", "eactd55",
"eactd30", "eactd36", "eactd12", "eactd38", "eactd35",
"eactd50", "eactd51",
"eactd25", "eactd39", "eactd42", "eactd56", "eactd58",
"eactd48", "eactd57", "eactd28", "eactd33"
))
all.results[1, 1:6] <- round(data.matrix(fitmeasures(
fit.baseline, fit.measures = c(
"chisq.scaled", "df.scaled",
"pvalue.scaled", "rmsea.scaled",
"cfi.scaled", "tli.scaled"))),
digits = 3)
all.results
