---
title: "Congresso_afetos"
editor_options:
  chunk_output_type: console
---

# Rodando os pacotes necessários

```{r}

#| echo: false
#| message: false
#| warning: false 
library(tidyverse)
library(lavaan)
library(semTools)

```

# Lendo os bancos e retirando casos que se adequem aos critérios de exclusão

```{r}

df <- read_csv("data/eactd_inv.csv") |>
  filter(tcle == "Sim", 
         prof_educacao_basica == "Sim",
         atuou_meses == "Sim")

codebook <- read_csv("data/code_book_final_escala_contexto_de_trabalho_docente.csv")

```

# Deletando categoria "outros" na variável "nivel de ensino" devido ao baixo n (80)

```{r}

df <- df |> 
  filter(nens_recode != "outros")

```

# Observando dados demográficos da amostra; m1 = Mais de um nível de ensino lecionado, f1 = Fundamental I, f2 = Fundamental II, ei = Ensino Infatil, em = Ensino Médio

```{r}

df |> 
  count(sexo, sort = T) |> 
  mutate(perc = round(n/sum(n)*100,2))

df |> 
  count(corraca, sort = T) |> 
  mutate(perc = round(n/sum(n)*100,2))

df |> 
  summarise(
    minimo_idade = min(idade, na.rm = T),
    maximo_idade = max(idade, na.rm = T),
    media_idade = mean(idade, na.rm = T),
    dp_idade = sd(idade, na.rm = T)
  )

df |> 
  count(nens_recode, sort = T) |> 
  mutate(perc = round(n/sum(n)*100,2))

```

# Guia para separar por fatores

```{r}

codebook |> 
  filter(Fator == "Relações socioprofissionais") |> 
  print()

codebook |> 
  filter(Fator == "Condições de trabalho") |> 
  print()

codebook |> 
  filter(Fator == "Organização do trabalho") |> 
  print()

```

# Sinalizando os Itens para cada fator: F1 - relações socioprofissionais; F2 - condições de trabalho; F3 - organização do trabalho

```{r}

modelo_eactd <- '
  F1 =~ eactd1 + eactd2 + eactd10 + eactd20 + eactd23 + 
         eactd32 + eactd34 + eactd37 + eactd44 + eactd45
         
  F2 =~ eactd12 + eactd14 + eactd29 + eactd30 + eactd35 +
         eactd36 + eactd38 + eactd41 + eactd50 + eactd51 + 
         eactd54 + eactd55
         
  F3 =~ eactd25 + eactd28 + eactd33 + eactd39 + eactd42 + 
         eactd48 + eactd56 + eactd57 + eactd58
'

```

# Criando objeto somente com os itens da EACTD

```{r}

itens_eactd <- c(
  "eactd1", "eactd2", "eactd10", "eactd20", "eactd23", 
  "eactd32", "eactd34", "eactd37", "eactd44", "eactd45",
  "eactd12", "eactd14", "eactd29", "eactd30", "eactd35",
  "eactd36", "eactd38", "eactd41", "eactd50", "eactd51",
  "eactd54", "eactd55", "eactd25", "eactd28", "eactd33",
  "eactd39", "eactd42", "eactd48", "eactd56", "eactd57",
  "eactd58"
)

```

# Matriz para armazenar resultados

```{r}

all.results <- matrix(NA, ncol = 8, nrow = 4)

```

# Proposição 01 (Wu & Estabrook, 2016) – somente estrutura fatorial - invariância configural - Código adaptado de Svetina, Rutkowski e Rutkowski (2019).

```{r}

baseline <- measEq.syntax(configural.model = modelo_eactd,
                          data = df,
                          ordered = itens_eactd,
                          parameterization = "delta",
                          ID.fac = "std.lv",
                          ID.cat = "Wu.Estabrook.2016",
                          group = "nens_recode",
                          group.equal = "configural")

model.baseline <- as.character(baseline)

fit.baseline <- cfa(model.baseline, data = df, 
                    group = "nens_recode", 
                    ordered = itens_eactd)

all.results[1, 1:6] <- round(data.matrix(fitmeasures(
  fit.baseline, fit.measures = c(
    "chisq.scaled", "df.scaled",
    "pvalue.scaled", "rmsea.scaled", 
    "cfi.scaled", "tli.scaled"))), 
  digits = 3)


```

# Proposição 04 (Wu & Estabrook, 2016) – fatores e limiares - Código adaptado de Svetina, Rutkowski e Rutkowski (2019).

```{r}

prop4 <- measEq.syntax(configural.model = modelo_eactd,
                       data = df,
                       ordered = itens_eactd,
                       parameterization = "delta",
                       ID.fac = "std.lv",
                       ID.cat = "Wu.Estabrook.2016",
                       group = "nens_recode",
                       group.equal = c("thresholds"))

model.prop4 <- as.character(prop4)

fit.prop4 <- cfa(model.prop4, data = df, 
                 group = "nens_recode", 
                 ordered = itens_eactd)

all.results[2, 1:6] <- round(data.matrix(fitmeasures(
  fit.prop4, fit.measures = c(
    "chisq.scaled", "df.scaled",
    "pvalue.scaled", "rmsea.scaled", 
    "cfi.scaled", "tli.scaled"))), 
  digits = 3)

```

# Proposição 07 (Wu & Estabrook, 2016) – fatores, limiares e cargas - Invariância Métrica - Código adaptado de Svetina, Rutkowski e Rutkowski (2019).

```{r}

prop7 <- measEq.syntax(configural.model = modelo_eactd,
                       data = df,
                       ordered = itens_eactd,
                       parameterization = "delta",
                       ID.fac = "std.lv",
                       ID.cat = "Wu.Estabrook.2016",
                       group = "nens_recode",
                       group.equal = c("thresholds", "loadings"))

model.prop7 <- as.character(prop7)

fit.prop7 <- cfa(model.prop7, data = df, 
                 group = "nens_recode", 
                 ordered = itens_eactd) 

all.results[3, 1:6] <- round(data.matrix(fitmeasures(
  fit.prop7, fit.measures = c(
    "chisq.scaled", "df.scaled",
    "pvalue.scaled", "rmsea.scaled", 
    "cfi.scaled", "tli.scaled"))), 
  digits = 3)

```

# Proposição 11 (Wu & Estabrook, 2016) – fatores, thresholds, cargas e interceptos - Invariância escalar - Código adaptado de Svetina, Rutkowski e Rutkowski (2019).

```{r}

prop11 <- measEq.syntax(configural.model = modelo_eactd,
                        data = df,
                        ordered = itens_eactd,
                        parameterization = "delta",
                        ID.fac = "std.lv",
                        ID.cat = "Wu.Estabrook.2016",
                        group = "nens_recode",
                        group.equal = c ("thresholds",
                        "loadings","intercepts"))

model.prop11 <- as.character(prop11)

fit.prop11 <- cfa(model.prop11, data = df, 
                  group = "nens_recode", 
                  ordered = itens_eactd) 

all.results[4, 1:6] <- round(data.matrix(fitmeasures(
  fit.prop11, fit.measures = c(
    "chisq.scaled", "df.scaled",
    "pvalue.scaled", "rmsea.scaled", 
    "cfi.scaled", "tli.scaled"))), 
  digits = 3)

```

# Calculando os deltas

```{r}

for (i in 2:4) {
  all.results[i, 7] <- all.results[i, 5] - all.results[i-1, 5]
  all.results[i, 8] <- all.results[i, 4] - all.results[i-1, 4]
}

```

# Nomeando as colunas e linhas

```{r}

colnames(all.results) <- c("chisq.scaled", "df.scaled", 
                           "pvalue.scaled", "rmsea.scaled", 
                           "cfi.scaled", "tli.scaled", 
                           "delta.cfi", "delta.rmsea")

rownames(all.results) <- c("baseline", "prop4", "prop7", "prop11")

```

# Exibindo os resultados

```{r}

print(all.results)

```
