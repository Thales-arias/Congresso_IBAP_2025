---
title: "Congresso_afetos"
editor_options:
  chunk_output_type: console
---

# Rodando os pacotes necessários

```{r}

#| echo: false
#| message: false
#| warning: false 
library(tidyverse)
library(lavaan)
library(semTools)

```

# Ler o arquivo e deletar categoria "outros"

```{r}

df <- read_csv("C:/projetos-r/Congresso_IBAP_2025/data/eactd_inv.csv")

df <- df |> 
  filter(nens_recode != "outros")

```

# Itens para cada fator: F1 - rel; F2 - cond; F3 - org

```{r}

modelo_eactd <- '
  F1 =~ eactd10 + eactd44 + eactd2 + eactd37 + eactd45 + 
         eactd23 + eactd34 + eactd32 + eactd1 + eactd20
  F2 =~ eactd29 + eactd41 + eactd54 + eactd14 + 
         eactd55 + eactd30 + eactd36 + eactd12 + eactd38 + 
         eactd35 + eactd50 + eactd51
  F3 =~ eactd25 + eactd39 + eactd42 + eactd56 + 
         eactd58 + eactd48 + eactd57 + eactd28 + eactd33
'

```

# Banco só com os itens da EACTD

```{r}

eactd_ok <- df |> 
  select(starts_with("eactd"))

```

# Matriz para armazenar resultados

```{r}

all.results <- matrix(NA, ncol = 8, nrow = 4)

```

# Proposição 01 (Wu & Estabrook, 2016) – somente estrutura fatorial - invariância configural

```{r}

baseline <- measEq.syntax(configural.model = modelo_eactd,
                          data = df,
                          ordered = colnames(eactd_ok),
                          parameterization = "delta",
                          ID.fac = "std.lv",
                          ID.cat = "Wu.Estabrook.2016",
                          group = "nens_recode",
                          group.equal = "configural")

model.baseline <- as.character(baseline)

fit.baseline <- cfa(model.baseline, data = df, 
                    group = "nens_recode", 
                    ordered = colnames(eactd_ok))

all.results[1, 1:6] <- round(data.matrix(fitmeasures(
  fit.baseline, fit.measures = c(
    "chisq.scaled", "df.scaled",
    "pvalue.scaled", "rmsea.scaled", 
    "cfi.scaled", "tli.scaled"))), 
  digits = 3)


```

# Proposição 04 – fatores e thresholds

```{r}

prop4 <- measEq.syntax(configural.model = modelo_eactd,
                       data = df,
                       ordered = colnames(eactd_ok),
                       parameterization = "delta",
                       ID.fac = "std.lv",
                       ID.cat = "Wu.Estabrook.2016",
                       group = "nens_recode",
                       group.equal = c("thresholds"))

model.prop4 <- as.character(prop4)

fit.prop4 <- cfa(model.prop4, data = df, 
                 group = "nens_recode", 
                 ordered = colnames(eactd_ok))

all.results[2, 1:6] <- round(data.matrix(fitmeasures(
  fit.prop4, fit.measures = c(
    "chisq.scaled", "df.scaled",
    "pvalue.scaled", "rmsea.scaled", 
    "cfi.scaled", "tli.scaled"))), 
  digits = 3)

```

# Proposição 07 – fatores, thresholds e cargas

```{r}

prop7 <- measEq.syntax(configural.model = modelo_eactd,
                       data = df,
                       ordered = colnames(eactd_ok),
                       parameterization = "delta",
                       ID.fac = "std.lv",
                       ID.cat = "Wu.Estabrook.2016",
                       group = "nens_recode",
                       group.equal = c("thresholds", "loadings"))

model.prop7 <- as.character(prop7)

fit.prop7 <- cfa(model.prop7, data = df, 
                 group = "nens_recode", 
                 ordered = colnames(eactd_ok)) 

all.results[3, 1:6] <- round(data.matrix(fitmeasures(
  fit.prop7, fit.measures = c(
    "chisq.scaled", "df.scaled",
    "pvalue.scaled", "rmsea.scaled", 
    "cfi.scaled", "tli.scaled"))), 
  digits = 3)

```

# Proposição 11 – fatores, thresholds, cargas e interceptos

```{r}

prop11 <- measEq.syntax(configural.model = modelo_eactd,
                        data = df,
                        ordered = colnames(eactd_ok),
                        parameterization = "delta",
                        ID.fac = "std.lv",
                        ID.cat = "Wu.Estabrook.2016",
                        group = "nens_recode",
                        group.equal = c ("thresholds",
                        "loadings","intercepts"))

model.prop11 <- as.character(prop11)

fit.prop11 <- cfa(model.prop11, data = df, 
                  group = "nens_recode", 
                  ordered = colnames(eactd_ok)) 

all.results[4, 1:6] <- round(data.matrix(fitmeasures(
  fit.prop11, fit.measures = c(
    "chisq.scaled", "df.scaled",
    "pvalue.scaled", "rmsea.scaled", 
    "cfi.scaled", "tli.scaled"))), 
  digits = 3)

```

# Calculando os deltas

```{r}

for (i in 2:4) {
  all.results[i, 7] <- all.results[i, 5] - all.results[i-1, 5]
  all.results[i, 8] <- all.results[i, 4] - all.results[i-1, 4]
}

```

# Nomes das colunas e linhas

```{r}

colnames(all.results) <- c("chisq.scaled", "df.scaled", 
                           "pvalue.scaled", "rmsea.scaled", 
                           "cfi.scaled", "tli.scaled", 
                           "delta.cfi", "delta.rmsea")

rownames(all.results) <- c("baseline", "prop4", "prop7", "prop11")

```

# Exibindo os resultados

```{r}

print(all.results)

```

# Comparativo dos modelos

```{r}

lavTestLRT(fit.baseline, fit.prop4, fit.prop7, fit.prop11)

```
